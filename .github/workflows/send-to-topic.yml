name: On-chain → Telegram Topic (Diário)

on:
  workflow_dispatch:
  schedule:
    - cron: "15 9 * * *"   # 06:15 BRT
    - cron: "30 9 * * *"   # 06:30 BRT
    - cron: "45 9 * * *"   # 06:45 BRT
    - cron: "0 10 * * *"   # 07:00 BRT
    - cron: "10 10 * * *"  # Watchdog diário 07:10 BRT

jobs:
  send-to-topic:
    runs-on: ubuntu-latest
    permissions:
      contents: read   # não comita nada; evita interferir nos selos
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
      TELEGRAM_TOPIC_ID:  ${{ vars.TELEGRAM_TOPIC_ID }}   # Actions → Variables
    steps:
      - uses: actions/checkout@v4

      - name: Garantir TOPIC_ID
        run: |
          if [ -z "${TELEGRAM_TOPIC_ID}" ]; then
            echo "::error::Defina Actions → Variables → TELEGRAM_TOPIC_ID (message_thread_id do tópico)."
            exit 1
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install requests

      - name: Gerar relatório (mesmo conteúdo) → arquivo
        run: |
          mkdir -p dist
          # ⬇️ TENTE primeiro imprimir o texto no STDOUT e redirecionar para arquivo.
          # Se seu script suportar isso, este comando funciona:
          # python onchain_to_telegram.py --provider groq --model llama-3.1-70b-versatile --send-as stdout > dist/report.md
          #
          # Caso NÃO exista modo stdout, substitua a linha acima por um comando
          # que grave o relatório em "dist/report.md" sem enviar ao Telegram.
          echo "⚠️ TODO: troque este placeholder pela geração real do relatório." > dist/report.md

      - name: Enviar texto para o TÓPICO
        run: python send_to_topic.py --file dist/report.md --parse-mode HTML