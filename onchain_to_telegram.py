# scripts/gold_report.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Relat√≥rio ‚Äî Dados de Mercado ‚Äî Ouro (XAU/USD) ‚Äî Di√°rio
Segue o layout ESPEC√çFICO em 10 t√≥picos (conforme exemplo do usu√°rio).

Vari√°veis de ambiente:
- TELEGRAM_BOT_TOKEN (obrigat√≥rio)
- TELEGRAM_CHAT_ID   (obrigat√≥rio)
- TELEGRAM_TOPIC_ID  (opcional)
- YF_PROXY           (opcional, proxy http/https para yfinance/requests)
- CFTC_CSV_URL       (opcional: CSV de posi√ß√£o l√≠quida CFTC/CME para OURO)
- ETF_HOLDINGS_SOURCE (opcional: endpoint com shares/fluxos GLD/IAU)

Arquivos persistentes:
- .sent/gold-daily-YYYYMMDD.sent  -> trava de envio
- .sent/gold_daily_counter.txt    -> contador ‚ÄúN¬∫ X‚Äù
"""

import os, io, sys, math, textwrap, html, json, time
from datetime import datetime, timedelta, timezone

import pandas as pd
import numpy as np
import requests
import yfinance as yf

BRT = timezone(timedelta(hours=-3), name="BRT")
ROOT = os.path.dirname(os.path.abspath(__file__))
REPO_ROOT = os.path.abspath(os.path.join(ROOT, ".."))
SENT_DIR = os.path.join(REPO_ROOT, ".sent")
os.makedirs(SENT_DIR, exist_ok=True)

def today_brt():
    return datetime.now(BRT)

def guard_path(dt):
    return os.path.join(SENT_DIR, f"gold-daily-{dt.strftime('%Y%m%d')}.sent")

def read_counter():
    path = os.path.join(SENT_DIR, "gold_daily_counter.txt")
    if not os.path.exists(path):
        return 0
    try:
        return int(open(path, "r", encoding="utf-8").read().strip() or "0")
    except:
        return 0

def write_counter(v: int):
    path = os.path.join(SENT_DIR, "gold_daily_counter.txt")
    with open(path, "w", encoding="utf-8") as f:
        f.write(str(v))

def pct(a,b):
    try:
        return (a/b - 1.0)*100.0
    except Exception:
        return np.nan

def fmt_pct(x):
    if x is None or (isinstance(x,float) and (np.isnan(x) or np.isinf(x))):
        return "‚Äî"
    return f"{x:+.2f}%"

def last_valid(series):
    s = pd.Series(series).dropna()
    return s.iloc[-1] if len(s) else np.nan

def fetch_yf(tickers, period="30d", interval="1d"):
    session = requests.Session()
    if os.getenv("YF_PROXY"):
        session.proxies = {"http": os.getenv("YF_PROXY"), "https": os.getenv("YF_PROXY")}
    data = yf.download(tickers=tickers, period=period, interval=interval,
                       auto_adjust=False, progress=False, session=session)
    if isinstance(data.columns, pd.MultiIndex):
        data = data["Close"]
    else:
        data = data["Close"].to_frame()
    return data.ffill()

def fetch_fred(series_id):
    url = f"https://fred.stlouisfed.org/graph/fredgraph.csv?id={series_id}"
    r = requests.get(url, timeout=30)
    r.raise_for_status()
    df = pd.read_csv(io.StringIO(r.text))
    df["DATE"] = pd.to_datetime(df["DATE"])
    df.set_index("DATE", inplace=True)
    s = pd.to_numeric(df[series_id], errors="coerce").dropna()
    return s

def send_telegram(text: str):
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    chat_id = os.getenv("TELEGRAM_CHAT_ID")
    topic_id = os.getenv("TELEGRAM_TOPIC_ID")
    if not token or not chat_id:
        print("Faltam TELEGRAM_BOT_TOKEN/TELEGRAM_CHAT_ID. Imprimindo abaixo:")
        print(text)
        return
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True
    }
    if topic_id:
        payload["message_thread_id"] = int(topic_id)
    resp = requests.post(url, data=payload, timeout=30)
    resp.raise_for_status()

# ------------------------ Blocos dos 10 t√≥picos (layout fixo) ------------------------

def bloco_1_fluxos_etf():
    # Sem fonte p√∫blica est√°vel de shares; usamos pre√ßo d/d e placeholder para shares
    txt = ""
    try:
        px = fetch_yf(["GLD","IAU"], period="10d")
        gld_dd = fmt_pct(pct(px["GLD"].iloc[-1], px["GLD"].iloc[-2]))
        iau_dd = fmt_pct(pct(px["IAU"].iloc[-1], px["IAU"].iloc[-2]))
        txt = f"Os fluxos em ETFs de ouro (GLD/IAU) n√£o possuem fonte p√∫blica padronizada de shares aqui. " \
              f"Como proxy, pre√ßo d/d: GLD {gld_dd}, IAU {iau_dd}. " \
              f"Configure <code>ETF_HOLDINGS_SOURCE</code> para capturar shares/cria√ß√µes se desejar."
    except Exception:
        txt = "N√£o h√° dados dispon√≠veis sobre fluxos de ETFs (necess√°rio fonte de shares/cria√ß√µes)."
    return f"<b>1. Fluxos em ETFs de Ouro</b>\n{txt}"

def bloco_2_cftc():
    url = os.getenv("CFTC_CSV_URL", "")
    if not url:
        return ("<b>2. Posi√ß√£o L√≠quida em Futuros (CFTC/CME)</b>\n"
                "N√£o h√° dados: defina <code>CFTC_CSV_URL</code> para importar a posi√ß√£o l√≠quida.")
    try:
        r = requests.get(url, timeout=30)
        r.raise_for_status()
        df = pd.read_csv(io.StringIO(r.text))
        # Tenta colunas comuns; se n√£o, apenas conta linhas
        cols_long = [c for c in df.columns if "Long" in c or "LONG" in c]
        cols_short= [c for c in df.columns if "Short" in c or "SHORT" in c]
        spec, nonc_l, nonc_s = "‚Äî","‚Äî","‚Äî"
        if cols_long and cols_short:
            last = df.iloc[-1]
            nonc_l = last[cols_long[0]]
            nonc_s = last[cols_short[0]]
            try:
                spec = int(nonc_l) - int(nonc_s)
            except Exception:
                spec = "‚Äî"
        return (f"<b>2. Posi√ß√£o L√≠quida em Futuros (CFTC/CME)</b>\n"
                f"- Speculadores: {spec}\n- N√£o-Commerciais Longueiros: {nonc_l}\n- N√£o-Commerciais Curtores: {nonc_s}")
    except Exception:
        return "<b>2. Posi√ß√£o L√≠quida em Futuros (CFTC/CME)</b>\nDados indispon√≠veis no momento."

def bloco_3_reservas_bc():
    return ("<b>3. Reservas de Bancos Centrais</b>\n"
            "N√£o h√° dados dispon√≠veis sobre as reservas de bancos centrais em ouro.")

def bloco_4_fluxos_miner_bancos():
    return ("<b>4. Fluxos de Mineradoras & Bancos</b>\n"
            "N√£o h√° dados dispon√≠veis sobre produ√ß√£o, hedge e opera√ß√µes OTC.")

def bloco_5_whale_ratio():
    return ("<b>5. Whale Ratio Institucional vs. Varejo</b>\n"
            "N√£o h√° dados dispon√≠veis sobre a participa√ß√£o relativa de institucionais e varejo.")

def bloco_6_drivers_macro():
    # DXY e juros reais (DFII10)
    dxy_txt = "‚Äî"
    real10_txt = "‚Äî"
    try:
        dxy = fetch_yf(["DX-Y.NYB"], period="10d")
        dxy_val = last_valid(dxy["DX-Y.NYB"])
        dxy_txt = f"{dxy_val:,.2f}"
    except Exception:
        pass
    try:
        dfii = fetch_fred("DFII10")
        real10_txt = f"{dfii.iloc[-1]:.1f}%"
    except Exception:
        pass
    return (f"<b>6. Drivers Macro</b>\n"
            f"- Taxa real de 10 anos: {real10_txt}\n"
            f"- √çndice DXY: {dxy_txt}")

def bloco_7_custos_oferta():
    return ("<b>7. Custos de Produ√ß√£o & Oferta F√≠sica</b>\n"
            "N√£o h√° dados dispon√≠veis sobre custos de produ√ß√£o e oferta f√≠sica de ouro.")

def bloco_8_estrutura_termo():
    # Spread simples GC=F - MGC=F (se ambos existirem); se falhar, manter indispon√≠vel
    try:
        fut = fetch_yf(["GC=F","MGC=F"], period="7d")
        spread = last_valid(fut["GC=F"]) - last_valid(fut["MGC=F"])
        return (f"<b>8. Estrutura a Termo</b>\n"
                f"Spread (GC=F - MGC=F): {spread:,.2f} USD/on√ßa.")
    except Exception:
        return ("<b>8. Estrutura a Termo</b>\n"
                "A estrutura a termo do mercado de ouro n√£o est√° dispon√≠vel (falha/fonte indispon√≠vel).")

def bloco_9_correlacoes():
    # Correla√ß√µes 30d: Ouro vs DXY; Ouro vs S&P500; Ouro vs BTC-USD (se poss√≠vel)
    try:
        px = fetch_yf(["XAUUSD=X","DX-Y.NYB","^GSPC","BTC-USD"], period="90d")
        px.columns = ["XAU","DXY","SPX","BTC"]
        rets = px.pct_change().dropna().tail(30)
        def c(a,b):
            try:
                return rets[a].corr(rets[b])
            except:
                return np.nan
        c1 = c("XAU","DXY")
        c2 = c("XAU","SPX")
        c3 = c("XAU","BTC")
        return (f"<b>9. Correla√ß√µes Cruzadas</b>\n"
                f"- Ouro vs DXY (30d): {c1:+.2f}\n"
                f"- Ouro vs S&P 500 (30d): {c2:+.2f}\n"
                f"- Ouro vs Bitcoin (30d): {c3:+.2f}")
    except Exception:
        return ("<b>9. Correla√ß√µes Cruzadas</b>\n"
                "N√£o h√° dados dispon√≠veis sobre as correla√ß√µes cruzadas (fonte indispon√≠vel).")

def bloco_10_interpretacao():
    return textwrap.dedent("""\
        <b>10. Interpreta√ß√£o Executiva & Conclus√£o</b>
        - O mercado de ouro est√° sendo influenciado por fatores macroecon√¥micos, como a taxa real e o √≠ndice DXY.
        - A posi√ß√£o l√≠quida em futuros pode favorecer os curtos quando especuladores l√≠quidos <i>‚â§ 0</i>.
        - Falta de dados sobre estrutura a termo e correla√ß√µes reduz a precis√£o do quadro.
        - Participa√ß√£o de institucionais vs. varejo indispon√≠vel.
        - Oferta f√≠sica/custos sem fonte padronizada.
        - Monitorar pr√≥ximos dados macro (FOMC, infla√ß√£o), DFII10 e DXY.
        
        <b>S√≠ntese</b>
        O mercado de ouro continua sens√≠vel a juros reais e ao d√≥lar. Sem s√©ries est√°veis para fluxos de ETFs (shares), 
        estrutura a termo granular e participa√ß√£o institucional, a an√°lise permanece parcial; ainda assim, DFII10 e DXY 
        seguem como vetores principais do vi√©s t√°tico.
    """).strip()

# ------------------------ Montagem do relat√≥rio ------------------------

def montar_relatorio():
    dt = today_brt()
    # contador (incrementa aqui)
    n = read_counter() + 1
    write_counter(n)

    titulo = f"üìä <b>Dados de Mercado ‚Äî Ouro (XAU/USD) ‚Äî {dt.strftime('%d de %B de %Y')} ‚Äî Di√°rio ‚Äî N¬∫ {n}</b>"
    # subt√≠tulo igual ao exemplo (‚ÄúNeste relat√≥rio‚Ä¶ at√© data‚Äù)
    subtitulo = f"Neste relat√≥rio, apresentamos os dados de mercado atualizados at√© {dt.strftime('%d de %B de %Y')}."

    partes = [
        titulo,
        subtitulo,
        "",
        bloco_1_fluxos_etf(),
        "",
        bloco_2_cftc(),
        "",
        bloco_3_reservas_bc(),
        "",
        bloco_4_fluxos_miner_bancos(),
        "",
        bloco_5_whale_ratio(),
        "",
        bloco_6_drivers_macro(),
        "",
        bloco_7_custos_oferta(),
        "",
        bloco_8_estrutura_termo(),
        "",
        bloco_9_correlacoes(),
        "",
        bloco_10_interpretacao(),
    ]
    txt = "\n".join(partes)

    # Telegram usa HTML ‚Äî garantir escapando seguro, mas preservar <b>, <i>, <code>, que j√° inserimos.
    # Como os blocos j√° v√™m ‚Äúlimpos‚Äù, apenas asseguramos que nada externo ficou sem escape:
    safe = html.unescape(txt)  # mant√©m tags que j√° definimos
    return safe

def main():
    dt = today_brt()
    gpath = guard_path(dt)
    if os.path.exists(gpath):
        print("J√° enviado hoje (trava .sent). Encerrando.")
        return
    try:
        texto = montar_relatorio()
        send_telegram(texto)
        # grava trava de envio
        open(gpath, "w", encoding="utf-8").write(texto[:200])
        print("OK: relat√≥rio Ouro enviado.")
    except Exception as e:
        print("Falha ao gerar/enviar relat√≥rio de Ouro:", e, file=sys.stderr)
        try:
            send_telegram(f"Falha no relat√≥rio de OURO: <code>{html.escape(str(e))}</code>")
        except Exception:
            pass
        sys.exit(1)

if __name__ == "__main__":
    main()